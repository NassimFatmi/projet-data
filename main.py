# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yCiZOXogAKCfJLeKH6GVXp8jJEHcu3P7
"""

import pandas as pd
import yfinance as yf

montantInitial = 10000
montantInvest = montantInitial

start = "2010-01-01"
end = "2023-12-20"


data = yf.download("CW8.PA", start=start, end=end)

data.head()

data.columns

# Prétraitement nettoyage des données
# copie la dataset en un pandas dataframe
df = pd.DataFrame(data)

# on a pas des valeurs null
len(df[df["Open"] == None])

len(df[df["High"] == None])

len(df[df["Low"] == None])

len(df[df["Adj Close"] == None])

len(df[df["Volume"] == None])

"""# Exploration des données

## calcule de l'écart type et l'écart interquartille
"""

# calcule d'ecart type
print("Le prix moyen des prix d'ouverture ", df["Open"].mean())

df["Open"].std()

"""**Remarque:** Pour les prix d'ouver[link text](https://)ture a une variation de 101.20\$ par rapport à la moyenne  qui est à 69.94\$"""

# calcule de l'ecart interquartille
quartiles = df["Open"].quantile([0.25, 0.75])
print(f"Q3 = {quartiles[0.75]}, Q1 = {quartiles[0.25]}")
iqr = quartiles[0.75] - quartiles[0.25]
print(iqr)

"""L'ecart interquartille : écart entre le premier quartille et le troisieme quartille est 90.7$

C-à-d on a une variabilité elevé de 90.7$ dans la dataset, une différence elevé par rapport à la moyenne 69.94\$
"""

df["Close"].std()

df["Close"].mean()

"""**Remarque:** Pour les prix de fermeture a une variation de 101.147\$ par rapport à la moyenne  qui est à 69.93\$"""

# calcule de l'ecart interquartille
quartiles = df["Close"].quantile([0.25, 0.75])
print(f"Q3 = {quartiles[0.75]}, Q1 = {quartiles[0.25]}")
iqr = quartiles[0.75] - quartiles[0.25]
print(iqr)

"""L'ecart interquartille : écart entre le premier quartille et le troisieme quartille est 91.58$

C-à-d on a une variabilité elevé de 90.7\$ dans la dataset par rapport à la moyenne qui est à 69.93$ tel que dans le premier quartille les prix de

fermeture sont à 10.67\$ et dans le Q3 on a une 10.67\$

## identification des métriques clés

### Rendement *moyen*
"""

# dans ce cas on va calculer le rendement annuel

# calcule de rendement

montantRecurant = 500

nbAction = 0

counter = 0

startYear = 2010

# le prix d'action au moment d'investisement
prixAction = df["Adj Close"][0]

# nombre d'action que on peut acheter
nbAction = montantInitial // prixAction

liquidite = montantInitial - (prixAction * nbAction)

currentDate = df.index[0]

# pd.DateOffset(months=1) + pd.offsets.BDay()

for ind in df.index:

  counter += 1
  if counter == 30 and ind.year >= startYear:

    # montant qu'on va ivestir ce mois
    montantRecMois = montantRecurant + liquidite

    # prix action lors de l'achat
    prixAction = df["Adj Close"][ind]

    # nombre d'action achetées ce mois
    nbActionAchete = montantRecMois // prixAction

    # nb action total
    nbAction += nbActionAchete

    # liquidité
    liquidite = montantRecMois - nbActionAchete * prixAction

    # mise a jour de montant investi
    montantInvest += montantRecurant

    counter = 0


lastAdjClose = df["Adj Close"][-1]
revenue = nbAction * lastAdjClose + liquidite
print(nbAction)
rendementMoyen = (revenue / montantInvest) - 1

print(f"Montant inverti {montantInvest}")
print(f"Le rendement moyen si on commence en {startYear} = {(rendementMoyen * 100):.2f}% et le revenue = {revenue}")



"""## Volatilité"""

volatilite = df['Adj Close'].std()
volatilite

"""## Ration de sharp"""

rendementSansRisque = 0.03

ratioSharp = (rendementMoyen - rendementSansRisque) / volatilite
ratioSharp

"""##CAGR"""

dateRange = df.index[-1].year - startYear

cagr = (revenue / montantInvest)**(1/dateRange) - 1

cagr

print(f"CAGR {(cagr*100):.2f}%")

