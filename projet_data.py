# -*- coding: utf-8 -*-
"""projet_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yjDfXe_60B7_8NpAtPDoRoBxeD3VhEk5
"""

def getFinanceData (indicator, startDate, endDate) :
  try :
    data = yf.download(indicator, start=startDate, end=endDate, interval='1mo')
    return data
  except :
      print("An exception occurred")

def cagr ( revenue, montantInvest, dateRange ) :
  return (revenue / montantInvest)**(1/dateRange) - 1

def ratioSharp (rendementMoyen, rendementSansRisque, volatilite) :
  return (rendementMoyen - rendementSansRisque) / volatilite

def volatilite (prix_action) :
  return prix_action.std()

def revenue (montantInitial, montantRecurant, financeTable) :
  montantInvestVariation = [{
      'montantInvest': montantInitial,
      'date': financeTable.index[0]
  }]

  revenueVariation = [
      {
        'revenue': montantInitial,
        'date': financeTable.index[0]
      }
  ]


  montantInvest = montantInitial

  # calcule de rendement
  nbAction = 0

  # le prix d'action au moment d'investisement
  prixAction = financeTable["Adj Close"][0]

  # nombre d'action que on peut acheter
  nbAction = montantInvest // prixAction

  liquidite = montantInvest - (prixAction * nbAction)

  for ind in financeTable.index[1:]:


      # montant qu'on va ivestir ce mois
      montantRecMois = montantRecurant + liquidite

      # prix action lors de l'achat
      prixAction = financeTable["Adj Close"][ind]

      # nombre d'action achetées ce mois
      nbActionAchete = montantRecMois // prixAction

      # nb action total
      nbAction += nbActionAchete

      # liquidité
      liquidite = montantRecMois - nbActionAchete * prixAction

      # mise a jour de montant investi
      montantInvest += montantRecurant

      montantInvestVariation.append({
        'montantInvest': montantInvest,
        'date': ind
      })

      revenueVariation.append({
        'revenue': nbAction * prixAction + liquidite,
        'date': ind
      })


  lastAdjClose = financeTable["Adj Close"][-1]
  revenue = nbAction * lastAdjClose + liquidite
  rendementMoyen = (revenue / montantInvest) - 1

  return {'montantInvest': montantInvest, 'revenue': revenue, 'rendementMoyen': rendementMoyen, 'montantInvestVariation': montantInvestVariation, 'revenueVariation': revenueVariation}


def ecartInterquartille (df) :
  # calcule de l'ecart interquartille
  quartiles = df["Close"].quantile([0.25, 0.75])
  iqr = quartiles[0.75] - quartiles[0.25]
  return iqr

def ecartType (df) :
  return df.std()

def moyenne (df) :
  return df.mean()

import pandas as pd
import yfinance as yf

# données
montantInitial = 10_000
montantRecurant = 500

start = "2010-01-01"
end = "2023-01-25"

INDICATOR = "HHH"

applData = getFinanceData(INDICATOR, start, end)

applData.head()

applData.tail()

# calcule de revenue
revenueStats = revenue(montantInitial, montantRecurant, applData)

# calcule de cagr
dateRange = applData.index[-1].year - applData.index[0].year
cagrAppl = cagr(revenueStats['revenue'], revenueStats['montantInvest'], dateRange)

# calcule de volatilite
volatiliteAppl = volatilite(applData['Adj Close'])

# calcule de ratio de sharp
rendementSansRisque = 0.03
ratioSharpAppl = ratioSharp (revenueStats['rendementMoyen'], rendementSansRisque, volatiliteAppl)

# calcule de la moyenne
moyenneAppl = moyenne(applData['Adj Close'])

INDICATOR_TSLA = "CW8.PA"

teslaData = getFinanceData(INDICATOR_TSLA, start, end)

teslaData.head()


# calcule de revenue
revenueStatsTsla = revenue(montantInitial, montantRecurant, teslaData)

# calcule de cagr
dateRange = teslaData.index[-1].year - teslaData.index[0].year
cagrTsla = cagr(revenueStatsTsla['revenue'], revenueStatsTsla['montantInvest'], dateRange)

# calcule de volatilite
volatiliteTsla = volatilite(teslaData['Adj Close'])

# calcule de ratio de sharp
rendementSansRisque = 0.03
ratioSharpAppl = ratioSharp (revenueStatsTsla['rendementMoyen'], rendementSansRisque, volatiliteTsla)

# calcule de la moyenne
moyenneTsla = moyenne(teslaData['Adj Close'])

from matplotlib import pyplot

# plot de montant investi
xInvest = [i['date'] for i in revenueStats['montantInvestVariation']]
yInvest = [i['montantInvest'] for i in revenueStats['montantInvestVariation']]

pyplot.plot(xInvest, yInvest)

# plot de revenue tesla
xTsla = [i['date'] for i in revenueStatsTsla['revenueVariation']]
yTsla = [i['revenue'] for i in revenueStatsTsla['revenueVariation']]

pyplot.plot(xTsla, yTsla, label = INDICATOR_TSLA)

# plot de revenue apple
xApple = [i['date'] for i in revenueStats['revenueVariation']]
yApple = [i['revenue'] for i in revenueStats['revenueVariation']]

pyplot.plot(xApple, yApple, label = INDICATOR)

pyplot.xlabel('Date')
pyplot.ylabel('Euros')

pyplot.legend()

pyplot.show()

print(f'                            {INDICATOR} | {INDICATOR_TSLA}')
print('Montant investi ', revenueStats['montantInvest'],'€         |' ,revenueStatsTsla['montantInvest'], '€')
print('Revenue         ', revenueStats['revenue'],'€     |' , revenueStatsTsla['revenue'], '€')
print('CAGR            ', (cagrAppl) * 100,'%          |' , (cagrTsla) * 100, '%')
print('Rendement            ', (revenueStats['rendementMoyen']) * 100,'%          |' , (revenueStatsTsla['rendementMoyen']) * 100, '%')

